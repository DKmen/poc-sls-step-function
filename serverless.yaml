service: poc-sls-step-function

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    S3_BUCKET_NAME: ${env:BUCKET_NAME}
    DYNAMODB_TABLE_NAME: ${env:DYNAMO_TABLE_NAME}

functions:
  fileProcessor:
    handler: src/apps/transformer/index.handler
    runtime: nodejs20.x
    environment:
      BUCKET_NAME: ${env:BUCKET_NAME}
      DYNAMO_TABLE_NAME: ${env:DYNAMO_TABLE_NAME}

resources:
  Resources:
    MyS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:BUCKET_NAME}
        NotificationConfiguration:
          EventBridgeConfiguration:
            EventBridgeEnabled: true
    
    MyDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMO_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # IAM Role for Step Functions
    StepFunctionsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - states.amazonaws.com
              Action:
                - sts:AssumeRole

        Policies:
          - PolicyName: StepFunctionsExecutionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                    - s3:GetObject
                    - dynamodb:PutItem
                    - dynamodb:GetItem
                    - dynamodb:UpdateItem
                  Resource: '*'

    # Step Function State Machine
    FileProcessingStateMachine:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        StateMachineName: FileProcessingStateMachine
        RoleArn:
          Fn::GetAtt:
            - StepFunctionsRole
            - Arn
        DefinitionString:
          Fn::Sub: |
            {
              "Comment": "Process file uploaded to S3",
              "StartAt": "ProcessFile",
              "States": {
                "ProcessFile": {
                  "Type": "Task",
                  "Resource": "${fileProcessorLambdaFunction.Arn}",
                  "Parameters": {
                    "bucketName.$": "$.detail.bucket.name",
                    "objectKey.$": "$.detail.object.key",
                    "eventTime.$": "$.time"
                  },
                  "Next": "FileProcessed"
                },
                "FileProcessed": {
                  "Type": "Succeed",
                  "Result": "File processing completed successfully"
                }
              }
            }
    
        # IAM Role for EventBridge to invoke Step Functions
    EventBridgeRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: EventBridgeExecutionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - states:StartExecution
                  Resource:
                    Fn::GetAtt:
                      - FileProcessingStateMachine
                      - Arn

    # EventBridge Rule to trigger Step Function on S3 upload
    S3UploadEventRule:
      Type: AWS::Events::Rule
      Properties:
        RoleArn:
          Fn::GetAtt:
            - EventBridgeRole
            - Arn
        Description: "Trigger Step Function when file is uploaded to S3"
        EventPattern:
          source:
            - "aws.s3"
          detail-type:
            - "Object Created"
          detail:
            bucket:
              name:
                - ${self:resources.Resources.MyS3Bucket.Properties.BucketName}
        State: ENABLED
        Targets:
          - Arn:
              Fn::GetAtt:
                - FileProcessingStateMachine
                - Arn
            Id: "FileProcessingTarget"
            RoleArn:
              Fn::GetAtt:
                - EventBridgeRole
                - Arn

plugins:
  - serverless-dotenv-plugin
  - serverless-scriptable-plugin
